import { PrismaClient } from "@prisma/client";
import { NextResponse } from "next/server";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken"; // 游댠 Correto

const prisma = new PrismaClient();
const SECRET_KEY = process.env.SECRET_KEY!; // 丘멆잺 Certifique-se de ter essa vari치vel no .env

export async function POST(req: Request) {
    try {
        const { email, senha } = await req.json();

        const usuario = await prisma.usuario.findUnique({ where: { email } });

        if (!usuario) {
            return NextResponse.json({ error: "Usu치rio n칚o encontrado!" }, { status: 401 });
        }

        // Compara a senha inserida com a armazenada no banco
        const senhaValida = await bcrypt.compare(senha, usuario.senha);

        if (!senhaValida) {
            return NextResponse.json({ error: "Credenciais inv치lidas!" }, { status: 401 });
        }

        // 游댠 Corre칞칚o: Gera um JWT v치lido com o ID do usu치rio e um tempo de expira칞칚o
        const token = jwt.sign({ id: usuario.id }, SECRET_KEY, { expiresIn: "1h" });

        return NextResponse.json({ token });
    } catch (error) {
        console.error("Erro na autentica칞칚o:", error);
        return NextResponse.json({ error: "Erro interno no servidor" }, { status: 500 });
    }
}
